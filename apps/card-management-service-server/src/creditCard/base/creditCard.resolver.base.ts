/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreditCard } from "./CreditCard";
import { CreditCardCountArgs } from "./CreditCardCountArgs";
import { CreditCardFindManyArgs } from "./CreditCardFindManyArgs";
import { CreditCardFindUniqueArgs } from "./CreditCardFindUniqueArgs";
import { CreateCreditCardArgs } from "./CreateCreditCardArgs";
import { UpdateCreditCardArgs } from "./UpdateCreditCardArgs";
import { DeleteCreditCardArgs } from "./DeleteCreditCardArgs";
import { CreditCardService } from "../creditCard.service";
@graphql.Resolver(() => CreditCard)
export class CreditCardResolverBase {
  constructor(protected readonly service: CreditCardService) {}

  async _creditCardsMeta(
    @graphql.Args() args: CreditCardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CreditCard])
  async creditCards(
    @graphql.Args() args: CreditCardFindManyArgs
  ): Promise<CreditCard[]> {
    return this.service.creditCards(args);
  }

  @graphql.Query(() => CreditCard, { nullable: true })
  async creditCard(
    @graphql.Args() args: CreditCardFindUniqueArgs
  ): Promise<CreditCard | null> {
    const result = await this.service.creditCard(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CreditCard)
  async createCreditCard(
    @graphql.Args() args: CreateCreditCardArgs
  ): Promise<CreditCard> {
    return await this.service.createCreditCard({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CreditCard)
  async updateCreditCard(
    @graphql.Args() args: UpdateCreditCardArgs
  ): Promise<CreditCard | null> {
    try {
      return await this.service.updateCreditCard({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreditCard)
  async deleteCreditCard(
    @graphql.Args() args: DeleteCreditCardArgs
  ): Promise<CreditCard | null> {
    try {
      return await this.service.deleteCreditCard(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
